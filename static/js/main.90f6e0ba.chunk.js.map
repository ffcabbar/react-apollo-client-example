{"version":3,"sources":["rickandmorty.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","rickandmorty","gql","App","useState","collapsed","setCollapsed","useQuery","loading","error","data","style","textAlign","Spinner","color","newData","characters","results","console","log","Fragment","Navbar","light","NavbarBrand","href","className","height","width","marginBottom","src","Logo","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","target","Container","Row","xs","map","item","Col","key","id","Card","CardImg","top","image","CardBody","CardTitle","name","Badge","species","CardText","gender","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,0C,ohBCwB3C,IAAMC,EAAeC,YAAH,KAqEHC,MAvDf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAKoBC,YAASN,GAAlCO,EALK,EAKLA,QAASC,EALJ,EAKIA,MAAOC,EALX,EAKWA,KAExB,GAAIF,EAAS,OAAO,yBAAKG,MAAO,CAACC,UAAW,WAAxB,IAAoC,kBAACC,EAAA,EAAD,CAASC,MAAM,YAAnD,eACpB,GAAIL,EAAO,OAAO,yBAAKE,MAAO,CAACC,UAAW,WAAxB,IAAqC,kBAACC,EAAA,EAAD,CAASC,MAAM,WAApD,8BAElB,IAAMC,EAAUL,EAAKM,WAAWC,QAGhC,OAFAC,QAAQC,IAAIJ,GAGZ,kBAAC,IAAMK,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQP,MAAM,QAAQQ,OAAK,GACvB,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,WAAU,yBAAKd,MAAO,CAACe,OAAO,QAAQC,MAAM,QAAQC,aAAc,QAASC,IAAKC,IAAMC,IAAI,kBAC1H,kBAACC,EAAA,EAAD,CAAeC,QAfA,kBAAM3B,GAAcD,IAeGoB,UAAU,SAChD,kBAACS,EAAA,EAAD,CAAUC,QAAS9B,EAAW+B,QAAM,GAClC,kBAACC,EAAA,EAAD,CAAKD,QAAM,GACT,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,OAAO,SAAShB,KAAK,gCAA9B,uBAEF,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,OAAO,SAAShB,KAAK,+BAA9B,iBAMV,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACL5B,EAAQ6B,KAAI,SAAAC,GACX,OACE,kBAACC,EAAA,EAAD,CAAKC,IAAKF,EAAKG,GAAIrC,MAAO,CAACiB,aAAc,SACvC,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACxB,MAAM,OAAOE,IAAKgB,EAAKO,MAAOrB,IAAI,iBAC/C,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAW,2BAAIT,EAAKU,OACpB,kBAACC,EAAA,EAAD,CAAO1C,MAAM,QAAQ+B,EAAKY,SAC1B,kBAACC,EAAA,EAAD,iEAGA,kBAACF,EAAA,EAAD,CAAO1C,MAAM,WAAW+B,EAAKc,kBCrE3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTAC,G,MAAS,IAAIC,IAAa,CAC9BC,IAAK,0CAGPC,IAASC,OACP,kBAAC,IAAD,CAAgBJ,OAAQA,GACtB,kBAAC,EAAD,OAEFK,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArE,GACLS,QAAQT,MAAMA,EAAMsE,c","file":"static/js/main.90f6e0ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rickandmorty.edfe1d16.png\";","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport Logo from \"./rickandmorty.png\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  Spinner,\n  Badge,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\n\nconst rickandmorty = gql`\n  {\n    characters {\n      results {\n        id\n        name\n        image\n        gender\n        species\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(true);\n  const toggleNavbar = () => setCollapsed(!collapsed);\n\n  // useQuery is a custom hook.\n  const { loading, error, data } = useQuery(rickandmorty);\n\n  if (loading) return <div style={{textAlign: \"center\"}}> <Spinner color=\"warning\" /> Loading...</div>;\n  if (error) return <div style={{textAlign: \"center\"}} > <Spinner color=\"danger\" /> Oppss !! TURN OFF AdBlock</div>;\n\n  const newData = data.characters.results;\n  console.log(newData);\n\n  return (\n  <React.Fragment>\n    <Navbar color=\"faded\" light>\n        <NavbarBrand href=\"/\" className=\"mr-auto\"><img style={{height:\"100px\",width:\"300px\",marginBottom: \"40px\"}} src={Logo} alt=\"rickandmorty\"/></NavbarBrand>\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\n        <Collapse isOpen={!collapsed} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink target=\"_blank\" href=\"https://rickandmortyapi.com/\">Rick and Morty API</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink target=\"_blank\" href=\"https://github.com/ffcabbar\">My GitHub</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n\n    <Container>\n      <Row xs=\"5\">\n        {newData.map(item => {\n          return (\n            <Col key={item.id} style={{marginBottom: \"10px\"}} >\n              <Card>\n                <CardImg top width=\"100%\" src={item.image} alt=\"RickandMorty\" />\n                <CardBody>\n                  <CardTitle><b>{item.name}</b></CardTitle>\n                  <Badge color=\"info\">{item.species}</Badge>\n                  <CardText>\n                    Lorem ipsum dolor sit amet consectetur adipisicing elit.\n                  </CardText>\n                  <Badge color=\"warning\">{item.gender}</Badge>\n                </CardBody>\n              </Card>\n            </Col>\n          );\n        })}\n      </Row>\n    </Container>\n  </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql/\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}